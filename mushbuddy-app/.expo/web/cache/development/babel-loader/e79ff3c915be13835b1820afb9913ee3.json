{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { GLOBALTYPES } from \"../redux/actions/globalTypes\";\nimport { getDataAPI } from \"../utils/fetchData\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Search = function Search() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      users = _useState4[0],\n      setUsers = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state;\n  }),\n      auth = _useSelector.auth;\n\n  var dispatch = useDispatch();\n\n  var handleSearch = function handleSearch(e) {\n    var res;\n    return _regeneratorRuntime.async(function handleSearch$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (search) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(getDataAPI(\"users/?username=\" + search, auth.token));\n\n          case 5:\n            res = _context.sent;\n            console.log(res);\n            setUsers(res.data.users);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](2);\n            dispatch({\n              type: GLOBALTYPES.ALERT,\n              payload: {\n                error: _context.t0.response.data.msg\n              }\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 10]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flex: 1\n    },\n    children: [_jsxs(View, {\n      children: [_jsx(TextInput, {\n        autoCapitalize: 'none',\n        placeholder: \"Typer Username\",\n        value: search,\n        onChangeText: function onChangeText(search) {\n          return setSearch(search);\n        }\n      }), _jsx(Button, {\n        onPress: function onPress() {\n          return handleSearch();\n        },\n        title: \"Search\"\n      })]\n    }), _jsx(FlatList, {\n      data: users,\n      keyExtractor: function keyExtractor(item) {\n        return item._id;\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(View, {\n          children: _jsx(Text, {\n            children: item.username\n          })\n        });\n      }\n    })]\n  });\n};\n\nexport default Search;","map":{"version":3,"sources":["/Users/jchen/CSProjects/project-mushbuddy/mushbuddy-app/newcomponents/search.js"],"names":["React","useState","useSelector","useDispatch","GLOBALTYPES","getDataAPI","Search","search","setSearch","users","setUsers","state","auth","dispatch","handleSearch","e","token","res","console","log","data","type","ALERT","payload","error","response","msg","justifyContent","alignItems","flex","item","_id","username"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT;AACA,SAASC,UAAT;;;;;;;;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACjB,kBAA4BL,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOM,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA0BP,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOQ,KAAP;AAAA,MAAcC,QAAd;;AACA,qBAAiBR,WAAW,CAAC,UAAAS,KAAK;AAAA,WAAIA,KAAJ;AAAA,GAAN,CAA5B;AAAA,MAAQC,IAAR,gBAAQA,IAAR;;AACA,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AAGA,MAAMW,YAAY,GAAG,SAAfA,YAAe,CAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACbR,MADa;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAGKF,UAAU,sBAAoBE,MAApB,EAA8BK,IAAI,CAACI,KAAnC,CAHf;;AAAA;AAGPC,YAAAA,GAHO;AAIbC,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAP,YAAAA,QAAQ,CAACO,GAAG,CAACG,IAAJ,CAASX,KAAV,CAAR;AALa;AAAA;;AAAA;AAAA;AAAA;AAObI,YAAAA,QAAQ,CAAC;AACLQ,cAAAA,IAAI,EAAEjB,WAAW,CAACkB,KADb;AACoBC,cAAAA,OAAO,EAAE;AAACC,gBAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaL,IAAb,CAAkBM;AAA1B;AAD7B,aAAD,CAAR;;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAaA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,cAAc,EAAE,QAAlB;AAA4BC,MAAAA,UAAU,EAAE,QAAxC;AAAiDC,MAAAA,IAAI,EAAC;AAAtD,KAAb;AAAA,eACI,MAAC,IAAD;AAAA,iBACI,KAAC,SAAD;AAAW,QAAA,cAAc,EAAI,MAA7B;AACI,QAAA,WAAW,EAAE,gBADjB;AAEI,QAAA,KAAK,EAAItB,MAFb;AAGI,QAAA,YAAY,EAAE,sBAACA,MAAD;AAAA,iBAAYC,SAAS,CAACD,MAAD,CAArB;AAAA;AAHlB,QADJ,EAKI,KAAC,MAAD;AACI,QAAA,OAAO,EAAE;AAAA,iBAAMO,YAAY,EAAlB;AAAA,SADb;AAEI,QAAA,KAAK,EAAC;AAFV,QALJ;AAAA,MADJ,EAYI,KAAC,QAAD;AACI,MAAA,IAAI,EAAEL,KADV;AAEI,MAAA,YAAY,EAAI,sBAACqB,IAAD;AAAA,eAAUA,IAAI,CAACC,GAAf;AAAA,OAFpB;AAGI,MAAA,UAAU,EAAE;AAAA,YAAGD,IAAH,QAAGA,IAAH;AAAA,eACJ,KAAC,IAAD;AAAA,oBACI,KAAC,IAAD;AAAA,sBAAOA,IAAI,CAACE;AAAZ;AADJ,UADI;AAAA;AAHhB,MAZJ;AAAA,IADJ;AAwBH,CA5CD;;AA8CA,eAAe1B,MAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { GLOBALTYPES } from '../redux/actions/globalTypes'\nimport { getDataAPI } from '../utils/fetchData'\nimport { View, TextInput, FlatList, Text, Button } from 'react-native'\n\nconst Search = () => {\n    const [search, setSearch] = useState('')\n    const [users, setUsers] = useState([])\n    const { auth } = useSelector(state => state)\n    const dispatch = useDispatch()\n\n\n    const handleSearch = async (e) => {\n        if(!search) return;\n        try {\n            const res = await getDataAPI(`users/?username=${search}`, auth.token)\n            console.log(res)\n            setUsers(res.data.users)\n        } catch (err) {\n            dispatch({\n                type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}\n            })\n        }\n    }\n\n    return (\n        <View style={{ justifyContent: \"center\", alignItems: \"center\",flex:1}}>\n            <View>\n                <TextInput autoCapitalize = {'none'}\n                    placeholder= \"Typer Username\"\n                    value = {search}\n                    onChangeText={(search) => setSearch(search)} />\n                <Button\n                    onPress={() => handleSearch()}\n                    title=\"Search\"\n                />\n            </View>\n\n            <FlatList\n                data={users}\n                keyExtractor = {(item) => item._id}\n                renderItem={({ item }) => (\n                        <View>\n                            <Text>{item.username}</Text>\n                        </View>\n                )}\n            />\n    </View>\n    )\n}\n\nexport default Search"]},"metadata":{},"sourceType":"module"}